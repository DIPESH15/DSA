/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    map<int, int> mp;

TreeNode* solve(int lin, int rin, int lpost, int rpost, vector<int>& inorder, vector<int>& postorder) {
    if (lin > rin || lpost > rpost) return nullptr;
    
    int rootval = postorder[rpost];
    int brpoint = mp[rootval];
    int leftTreeSize = brpoint - lin;
    
    TreeNode* root = new TreeNode(rootval);
    root->left = solve(lin, brpoint - 1, lpost, lpost + leftTreeSize - 1, inorder, postorder);
    root->right = solve(brpoint + 1, rin, lpost + leftTreeSize, rpost - 1, inorder, postorder);
    
    return root;
}



    TreeNode* buildTree(vector<int>& inorder, vector<int>& postorder) {
        for (int i = 0; i < inorder.size(); i++) {
        mp[inorder[i]] = i;
    }
    return solve(0, inorder.size() - 1, 0, postorder.size() - 1, inorder, postorder);
    }
};
