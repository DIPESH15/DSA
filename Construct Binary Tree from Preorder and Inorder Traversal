
//////Hashing method////
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    map<int, int> mp;

    TreeNode* solve(int Lin, int Rin, int Lpre, int Rpre, vector<int>& preorder, vector<int>& inorder) {
        if (Rin < Lin) return nullptr;  

        int rootval = preorder[Lpre];  
        int brpoint = mp[rootval];      

        TreeNode* root = new TreeNode(rootval);  

        root->left = solve(Lin, brpoint - 1, Lpre + 1, Lpre + (brpoint - Lin), preorder, inorder);

        root->right = solve(brpoint + 1, Rin, Lpre + (brpoint - Lin) + 1, Rpre, preorder, inorder);

        return root;
    }

    TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder) {
        for (int i = 0; i < inorder.size(); i++) {
            mp[inorder[i]] = i;  
        }  
        return solve(0, inorder.size() - 1, 0, preorder.size() - 1, preorder, inorder);
    }
};
