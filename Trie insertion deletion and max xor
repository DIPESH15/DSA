#include <bits/stdc++.h>
using namespace std;
#define int long long
int LN = 32;

struct node {
    node *child[2];
    int cnt = 0;
    node() {
        child[0] = NULL;
        child[1] = NULL;
    }
};

struct trie {
    node* root;
    trie() {
        root = new node;
    }

    void insert(int n) {
        node* curr = root;
        for (int i = LN - 1; i >= 0; i--) {
            curr->cnt++;
            int x = (n & (1LL << i)) ? 1 : 0;
            if (curr->child[x] == NULL) {
                curr->child[x] = new node;
            }
            curr = curr->child[x];
        }
        curr->cnt++;
    }

    void deleted(int n) {
        node* curr = root;
        for (int i = LN - 1; i >= 0; i--) {
            curr->cnt--;
            int x = (n & (1LL << i)) ? 1 : 0;
            if (curr->child[x] == NULL) {
                curr->child[x] = new node;
            }
            curr = curr->child[x];
        }
        curr->cnt--;
    }

    int query(int n) {
        node* curr = root;
        int ans = 0;
        for (int i = LN - 1; i >= 0; i--) {
            int x = (n & (1LL << i)) ? 1 : 0;
            if (curr->child[1 ^ x] != NULL && curr->child[1 ^ x]->cnt > 0) {
                ans ^= (1LL << i);
                curr = curr->child[1 ^ x];
            } else {
                curr = curr->child[x];
            }
        }
        return ans;
    }
};

void solve() {
    trie Tr;
    Tr.insert(0);
    int q;
    cin >> q;
    while (q--) {
        char c;
        cin >> c;
        if (c == '+') {
            int x;
            cin >> x;
            Tr.insert(x);
        } else if (c == '-') {
            int x;
            cin >> x;
            Tr.deleted(x);
        } else if (c == '?') {
            int x;
            cin >> x;
            cout << Tr.query(x) << endl;
        }
    }
}

signed main() {
    ios_base::sync_with_stdio(false);
    cin.tie(nullptr);
    
    int t = 1;
    //cin >> t;
    while (t--) {
        solve();
    }
    
    return 0;
}
