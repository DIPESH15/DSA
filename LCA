#include <iostream>
#include <vector>
using namespace std;
typedef long long int ll;
typedef vector<ll> vl;
const int MOD = 1e9 + 7;


vector<vector<int>> parent;
vector<vector<int>> grid;
vector<int> depth;

void dfs(int node, int par) {
    parent[node][0] = par;
    depth[node] = par == 0 ? 0 : depth[par] + 1;
    for (int i = 1; i <= 20; i++) {
        if (parent[node][i-1] != -1) {
            parent[node][i] = parent[parent[node][i-1]][i-1];
        } else {
            parent[node][i] = -1;
        }
    }
    for (auto v : grid[node]) {
        if (v != par) {
            dfs(v, node);
        }
    }
}

int lca(int u, int v) {
    if (depth[u] < depth[v]) {
        swap(u, v);
    }

    for (int i = 20; i >= 0; --i) {
        if ((depth[u] - depth[v]) & (1 << i)) {
            u = parent[u][i];
        }
    }

    if (u == v) return u;

    for (int i = 20; i >= 0; i--) {
        if (parent[u][i] != parent[v][i]) {
            u = parent[u][i];
            v = parent[v][i];
        }
    }

    return parent[u][0];
}

void solve() {
    int n, q;
    cin >> n;
    grid.assign(n + 1, vector<int>());
    depth.assign(n + 1, 0);
    parent.assign(n + 1, vector<int>(21, 0));
    

    for (int i = 0; i < n-1; i++) {
        int a, b;
        cin >> a >> b;
        grid[a].push_back(b);
        grid[b].push_back(a);
    }

      
    dfs(1, 0);
}
